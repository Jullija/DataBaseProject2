{"ast":null,"code":"var _jsxFileName = \"/Users/Karol/WebstormProjects/Database/DataBaseProject2/my-shop/src/components/ParticleAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleAnimation = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const ParticleCanvas = canvasRef.current;\n    const context = ParticleCanvas.getContext('2d');\n    ParticleCanvas.width = window.innerWidth - 20;\n    ParticleCanvas.height = window.innerHeight - 10;\n    const handleResize = () => {\n      ParticleCanvas.width = window.innerWidth - 20;\n      ParticleCanvas.height = window.innerHeight - 10;\n    };\n    window.addEventListener('resize', handleResize);\n    let particles = {},\n      particleIndex = 0,\n      settings = {\n        density: 20,\n        particleSize: 2,\n        startingX: ParticleCanvas.width / 2,\n        startingY: ParticleCanvas.height,\n        gravity: -0.01\n      };\n    class Particle {\n      constructor() {\n        this.x = settings.startingX * (Math.random() * 10);\n        this.y = settings.startingY;\n        this.vx = Math.random() * 2 / 3 - Math.random() * 3 / 3;\n        this.vy = -(Math.random() * 5) / 3;\n        particleIndex++;\n        particles[particleIndex] = this;\n        this.id = particleIndex;\n        this.life = 0;\n        this.maxLife = 200;\n        this.alpha = 1;\n        this.red = 0;\n        this.green = 255;\n        this.blue = 255;\n      }\n      draw() {\n        this.x += this.vx;\n        this.y += this.vy;\n        this.vy += settings.gravity;\n        this.life++;\n        this.red += 2;\n        this.alpha -= 0.005;\n        if (this.life >= this.maxLife) {\n          delete particles[this.id];\n        }\n        context.clearRect(settings.leftWall, settings.groundLevel, ParticleCanvas.width, ParticleCanvas.height);\n        context.beginPath();\n        context.fillStyle = `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n        context.arc(this.x, this.y, settings.particleSize, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fill();\n      }\n    }\n    const animateDust = () => {\n      context.clearRect(0, 0, ParticleCanvas.width, ParticleCanvas.height);\n      for (let i = 0; i < settings.density; i++) {\n        if (Math.random() > 0.97) {\n          new Particle();\n        }\n      }\n      for (let i in particles) {\n        particles[i].draw();\n      }\n      requestAnimationFrame(animateDust);\n    };\n    animateDust();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleAnimation, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ParticleAnimation;\nexport default ParticleAnimation;\nvar _c;\n$RefreshReg$(_c, \"ParticleAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ParticleAnimation","_s","canvasRef","ParticleCanvas","current","context","getContext","width","window","innerWidth","height","innerHeight","handleResize","addEventListener","particles","particleIndex","settings","density","particleSize","startingX","startingY","gravity","Particle","constructor","x","Math","random","y","vx","vy","id","life","maxLife","alpha","red","green","blue","draw","clearRect","leftWall","groundLevel","beginPath","fillStyle","arc","PI","closePath","fill","animateDust","i","requestAnimationFrame","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Karol/WebstormProjects/Database/DataBaseProject2/my-shop/src/components/ParticleAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst ParticleAnimation = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const ParticleCanvas = canvasRef.current;\n    const context = ParticleCanvas.getContext('2d');\n\n    ParticleCanvas.width = window.innerWidth - 20;\n    ParticleCanvas.height = window.innerHeight - 10;\n\n    const handleResize = () => {\n        ParticleCanvas.width = window.innerWidth - 20;\n        ParticleCanvas.height = window.innerHeight - 10;\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    let particles = {},\n      particleIndex = 0,\n      settings = {\n        density: 20,\n        particleSize: 2,\n        startingX: ParticleCanvas.width / 2,\n        startingY: ParticleCanvas.height,\n        gravity: -0.01,\n      };\n\n    class Particle {\n      constructor() {\n        this.x = settings.startingX * (Math.random() * 10);\n        this.y = settings.startingY;\n\n        this.vx = (Math.random() * 2) / 3 - (Math.random() * 3) / 3;\n        this.vy = -(Math.random() * 5) / 3;\n\n        particleIndex++;\n        particles[particleIndex] = this;\n        this.id = particleIndex;\n        this.life = 0;\n        this.maxLife = 200;\n        this.alpha = 1;\n        this.red = 0;\n        this.green = 255;\n        this.blue = 255;\n      }\n      draw() {\n        this.x += this.vx;\n        this.y += this.vy;\n\n        this.vy += settings.gravity;\n\n        this.life++;\n\n        this.red += 2;\n\n        this.alpha -= 0.005;\n\n        if (this.life >= this.maxLife) {\n          delete particles[this.id];\n        }\n\n        context.clearRect(settings.leftWall, settings.groundLevel, ParticleCanvas.width, ParticleCanvas.height);\n        context.beginPath();\n        context.fillStyle = `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n        context.arc(this.x, this.y, settings.particleSize, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fill();\n      }\n    }\n\n\n    const animateDust = () => {\n      context.clearRect(0, 0, ParticleCanvas.width, ParticleCanvas.height);\n\n      for (let i = 0; i < settings.density; i++) {\n        if (Math.random() > 0.97) {\n          new Particle();\n        }\n      }\n\n      for (let i in particles) {\n        particles[i].draw();\n      }\n      requestAnimationFrame(animateDust);\n    };\n\n    animateDust();\n\n    return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n  }, []);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default ParticleAnimation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}