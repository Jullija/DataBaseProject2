{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\milek\\\\OneDrive\\\\Pulpit\\\\frontfun\\\\bazy\\\\my-shop\\\\src\\\\components\\\\ParticleAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleAnimation = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const ParticleCanvas = canvasRef.current;\n    const context = ParticleCanvas.getContext('2d');\n    ParticleCanvas.width = window.innerWidth - 20;\n    ParticleCanvas.height = window.innerHeight - 10;\n    const handleResize = () => {\n      ParticleCanvas.width = window.innerWidth - 20;\n      ParticleCanvas.height = window.innerHeight - 10;\n    };\n    window.addEventListener('resize', handleResize);\n    let particles = {},\n      particleIndex = 0,\n      settings = {\n        density: 20,\n        particleSize: 2,\n        startingX: ParticleCanvas.width / 2,\n        startingY: ParticleCanvas.height,\n        gravity: -0.01\n      };\n    function Particle() {\n      this.x = settings.startingX * (Math.random() * 10);\n      this.y = settings.startingY;\n      this.vx = Math.random() * 2 / 3 - Math.random() * 3 / 3;\n      this.vy = -(Math.random() * 5) / 3;\n      particleIndex++;\n      particles[particleIndex] = this;\n      this.id = particleIndex;\n      this.life = 0;\n      this.maxLife = 200;\n      this.alpha = 1;\n      this.red = 0;\n      this.green = 255;\n      this.blue = 255;\n    }\n    Particle.prototype.draw = function () {\n      this.x += this.vx;\n      this.y += this.vy;\n      this.vy += settings.gravity;\n      this.life++;\n      this.red += 2;\n      this.alpha -= 0.005;\n      if (this.life >= this.maxLife) {\n        delete particles[this.id];\n      }\n      context.clearRect(settings.leftWall, settings.groundLevel, ParticleCanvas.width, ParticleCanvas.height);\n      context.beginPath();\n      context.fillStyle = `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n      context.arc(this.x, this.y, settings.particleSize, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    };\n    const animateDust = () => {\n      context.clearRect(0, 0, ParticleCanvas.width, ParticleCanvas.height);\n      for (let i = 0; i < settings.density; i++) {\n        if (Math.random() > 0.97) {\n          new Particle();\n        }\n      }\n      for (let i in particles) {\n        particles[i].draw();\n      }\n      requestAnimationFrame(animateDust);\n    };\n    animateDust();\n    return () => {\n      window.removeEventListener('resize');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"ParticleCanvas\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleAnimation, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ParticleAnimation;\nexport default ParticleAnimation;\nvar _c;\n$RefreshReg$(_c, \"ParticleAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ParticleAnimation","_s","canvasRef","ParticleCanvas","current","context","getContext","width","window","innerWidth","height","innerHeight","handleResize","addEventListener","particles","particleIndex","settings","density","particleSize","startingX","startingY","gravity","Particle","x","Math","random","y","vx","vy","id","life","maxLife","alpha","red","green","blue","prototype","draw","clearRect","leftWall","groundLevel","beginPath","fillStyle","arc","PI","closePath","fill","animateDust","i","requestAnimationFrame","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/milek/OneDrive/Pulpit/frontfun/bazy/my-shop/src/components/ParticleAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst ParticleAnimation = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const ParticleCanvas = canvasRef.current;\r\n    const context = ParticleCanvas.getContext('2d');\r\n\r\n    ParticleCanvas.width = window.innerWidth - 20;\r\n    ParticleCanvas.height = window.innerHeight - 10;\r\n\r\n    const handleResize = () => {\r\n        ParticleCanvas.width = window.innerWidth - 20;\r\n        ParticleCanvas.height = window.innerHeight - 10;\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    let particles = {},\r\n      particleIndex = 0,\r\n      settings = {\r\n        density: 20,\r\n        particleSize: 2,\r\n        startingX: ParticleCanvas.width / 2,\r\n        startingY: ParticleCanvas.height,\r\n        gravity: -0.01,\r\n      };\r\n\r\n    function Particle() {\r\n      this.x = settings.startingX * (Math.random() * 10);\r\n      this.y = settings.startingY;\r\n\r\n      this.vx = (Math.random() * 2) / 3 - (Math.random() * 3) / 3;\r\n      this.vy = -(Math.random() * 5) / 3;\r\n\r\n      particleIndex++;\r\n      particles[particleIndex] = this;\r\n      this.id = particleIndex;\r\n      this.life = 0;\r\n      this.maxLife = 200;\r\n      this.alpha = 1;\r\n      this.red = 0;\r\n      this.green = 255;\r\n      this.blue = 255;\r\n    }\r\n\r\n    Particle.prototype.draw = function () {\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n\r\n      this.vy += settings.gravity;\r\n\r\n      this.life++;\r\n\r\n      this.red += 2;\r\n\r\n      this.alpha -= 0.005;\r\n\r\n      if (this.life >= this.maxLife) {\r\n        delete particles[this.id];\r\n      }\r\n\r\n      context.clearRect(settings.leftWall, settings.groundLevel, ParticleCanvas.width, ParticleCanvas.height);\r\n      context.beginPath();\r\n      context.fillStyle = `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\r\n      context.arc(this.x, this.y, settings.particleSize, 0, Math.PI * 2, true);\r\n      context.closePath();\r\n      context.fill();\r\n    };\r\n\r\n    const animateDust = () => {\r\n      context.clearRect(0, 0, ParticleCanvas.width, ParticleCanvas.height);\r\n\r\n      for (let i = 0; i < settings.density; i++) {\r\n        if (Math.random() > 0.97) {\r\n          new Particle();\r\n        }\r\n      }\r\n\r\n      for (let i in particles) {\r\n        particles[i].draw();\r\n      }\r\n      requestAnimationFrame(animateDust);\r\n    };\r\n\r\n    animateDust();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize');\r\n    };\r\n  }, []);\r\n\r\n  return <canvas id=\"ParticleCanvas\" ref={canvasRef} />;\r\n};\r\n\r\nexport default ParticleAnimation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}